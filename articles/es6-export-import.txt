0:[[["",{"children":["articles",{"children":[["slug","es6-export-import","d"],{"children":["__PAGE__?{\"slug\":\"es6-export-import\"}",{}]}]}]},"$undefined","$undefined",true],"$L1",[[],["$L2",null]]]]
3:HL["/_next/static/css/5c5a75f489881250.css",{"as":"style"}]
4:I{"id":"770","chunks":["171:static/chunks/171-b78b0fda5020ccdb.js","509:static/chunks/509-5ff123a447c14d07.js","185:static/chunks/app/layout-918aec763b23a032.js"],"name":"","async":false}
5:I{"id":"3011","chunks":["171:static/chunks/171-b78b0fda5020ccdb.js","509:static/chunks/509-5ff123a447c14d07.js","185:static/chunks/app/layout-918aec763b23a032.js"],"name":"","async":false}
6:I{"id":"105","chunks":["171:static/chunks/171-b78b0fda5020ccdb.js","793:static/chunks/793-7c325186b5bb1d92.js","553:static/chunks/553-3e31f0dd94cf78e4.js","83:static/chunks/app/articles/[slug]/page-79ae9a7371fdbfb6.js"],"name":"","async":false}
7:I{"id":"6606","chunks":["171:static/chunks/171-b78b0fda5020ccdb.js","793:static/chunks/793-7c325186b5bb1d92.js","553:static/chunks/553-3e31f0dd94cf78e4.js","83:static/chunks/app/articles/[slug]/page-79ae9a7371fdbfb6.js"],"name":"","async":false}
8:I{"id":"9544","chunks":["272:static/chunks/webpack-a477e8d29e1bdc30.js","667:static/chunks/2443530c-30b88932146dcfcd.js","139:static/chunks/139-357fbf7134fa8a25.js"],"name":"","async":false}
9:I{"id":"99","chunks":["272:static/chunks/webpack-a477e8d29e1bdc30.js","667:static/chunks/2443530c-30b88932146dcfcd.js","139:static/chunks/139-357fbf7134fa8a25.js"],"name":"","async":false}
b:I{"id":"1408","chunks":["171:static/chunks/171-b78b0fda5020ccdb.js","793:static/chunks/793-7c325186b5bb1d92.js","553:static/chunks/553-3e31f0dd94cf78e4.js","83:static/chunks/app/articles/[slug]/page-79ae9a7371fdbfb6.js"],"name":"","async":false}
1:[["$","html",null,{"lang":"ko","children":[["$","head",null,{"children":[["$","link",null,{"rel":"stylesheet","as":"style","crossOrigin":"","href":"https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.6/dist/web/static/pretendard.css"}],["$","link",null,{"rel":"stylesheet","as":"style","crossOrigin":"","href":"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/github.min.css","title":"light"}],["$","link",null,{"rel":"stylesheet","as":"style","crossOrigin":"","href":"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/github-dark.min.css","title":"dark"}],["$","link",null,{"rel":"icon","href":"/favicon.ico"}]]}],["$","$L4",null,{"children":["$","$L5",null,{"children":["$","body",null,{"children":[["$","$L6",null,{}],["$","$L7",null,{"children":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","articles","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","articles","children",["slug","es6-export-import","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$La",null],"segment":"__PAGE__?{\"slug\":\"es6-export-import\"}"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5c5a75f489881250.css","precedence":"next"}]]}],"segment":["slug","es6-export-import","d"]},"styles":[]}],"segment":"articles"},"styles":[]}]}],["$","$Lb",null,{}]]}]}]}]]}],null]
2:[[["$","meta",null,{"charSet":"utf-8"}],null,null,null,null,null,null,null,null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,null]
c:I{"id":"809","chunks":["171:static/chunks/171-b78b0fda5020ccdb.js","793:static/chunks/793-7c325186b5bb1d92.js","553:static/chunks/553-3e31f0dd94cf78e4.js","83:static/chunks/app/articles/[slug]/page-79ae9a7371fdbfb6.js"],"name":"","async":false}
d:I{"id":"8850","chunks":["171:static/chunks/171-b78b0fda5020ccdb.js","793:static/chunks/793-7c325186b5bb1d92.js","553:static/chunks/553-3e31f0dd94cf78e4.js","83:static/chunks/app/articles/[slug]/page-79ae9a7371fdbfb6.js"],"name":"","async":false}
e:I{"id":"5771","chunks":["171:static/chunks/171-b78b0fda5020ccdb.js","793:static/chunks/793-7c325186b5bb1d92.js","553:static/chunks/553-3e31f0dd94cf78e4.js","83:static/chunks/app/articles/[slug]/page-79ae9a7371fdbfb6.js"],"name":"","async":false}
a:[["$","$Lc",null,{"title":"Articles | rory dev","description":" Mainly handle development-related knowledge and project retrospectives."}],["$","$Ld",null,{"article":{"__typename":"Article","sys":{"__typename":"Sys","id":"4ritomHLNZcSfd3lK2Uoh5"},"title":"ES6 import / export 기본 사용 방법","slug":"es6-export-import","content":"<h2 id=\"시작에-앞서\">시작에 앞서,</h2>\n<p>React 에서 모듈간 코드 공유와 재사용을 위해 자주 사용되는 import / export ES6 구문에 대해 알아보고자 한다. 쉽고 간단할 수록 , ‘하던 대로’ 코드를 작성하게 된다. 이번 포스팅을 통해, 조금 더 의식적으로 코드를 작성해보자.</p>\n<h3 id=\"모듈이란\">모듈이란?</h3>\n<p>코드의 재사용성을 위해 사용되는 독립적인 코드의 단위이다. function / component 등을 담을 수 있고, 다른 파일에서 임포트해서 사용할 수도 있다.  여기서 “모듈화”를 한다고 하면, 코드를 독립적인 단위로 분리해서 구성하는 것을 의미한다.</p>\n<h3 id=\"export와-import-사용-방법\">export와 import 사용 방법</h3>\n<ol>\n<li>Default Export / import</li>\n</ol>\n<p>단일 모듈을 내보낼 때 사용된다. 이때, 한 파일 내에서 export default 키워드는 오직 하나만 있어야 한다. </p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">myFunction</span> = (<span class=\"hljs-params\"></span>) =&gt; { <span class=\"hljs-comment\">/* 함수 내용 */</span> };\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> myFunction;\n</code></pre><p>default export 를 사용한 모듈을 import 해 올 때는 다른 이름으로 정의하여 사용할 수 있다.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> myFunction <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./myFunction'</span>;\n\n<span class=\"hljs-comment\">// 다른 이름으로 정의하여 import 해올 수 있다.</span>\n<span class=\"hljs-keyword\">import</span> myFunc <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./myFunction'</span>;\n</code></pre><p>단, let / const 를 바로 내보낼 수는 없다. function / class 는 가능하다.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">let</span> myValue1 = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 불가</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">const</span> myValue2 = <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">// 불가</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myFunction</span> () { ... } <span class=\"hljs-comment\">// 가능</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">myClass</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {} <span class=\"hljs-comment\">// 가능</span>\n</code></pre><ol start=\"2\">\n<li>Named Export / import</li>\n</ol>\n<p>한 파일에서 여러 모듈을 내보낼 때 사용한다. 내보내기할 대상 앞에 export 키워드를 사용한다.</p>\n<ul>\n<li>하나씩 내보내기</li>\n</ul>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">myFunction</span> = (<span class=\"hljs-params\"></span>) =&gt; { <span class=\"hljs-comment\">/* 함수 내용 */</span> };\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> myVariable = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span> { <span class=\"hljs-comment\">/* 클래스 내용 */</span> }\n</code></pre><ul>\n<li>목록으로 내보내기</li>\n</ul>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">export</span> { myFunction, myVariable, <span class=\"hljs-title class_\">MyClass</span> };\n</code></pre><ul>\n<li>내보내면서 이름을 바꾸기</li>\n</ul>\n<pre><code>export { myFunction as myFunc, myVariable as myVar};\n</code></pre><ul>\n<li>비구조화로 내보내기</li>\n</ul>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> { name1, <span class=\"hljs-attr\">name2</span>: bar } = o;\n</code></pre><ol start=\"3\">\n<li>Default + Named export import</li>\n</ol>\n<p>두 방식을 섞어서 사용할 수도 있다. (이 방식은 아직까지 사용해본 적은 없다)</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">example1</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"example1\"</span>);\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">example2</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"example3\"</span>);\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">example3</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"example3\"</span>);\n}\n\n<span class=\"hljs-keyword\">export</span> { example1 <span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">default</span>, example2, example3 };\n</code></pre><h3 id=\"파일-구성과-모듈-조합\">파일 구성과 모듈 조합</h3>\n<p>현업에서는 하나의 목적을 가진 무수한 모듈들을 임포트하여 사용해야 하는 상황이 발생하는데, 이때 적절히 파일 구성을 해주어야, 코드 재사용성을 높일 수 있다.</p>\n<p>예를 들어, 아래 사진처럼 ‘components’ 폴더 안에 ‘blocks’ 의 목적을 가진 여러 모듈 (Box, Hspace, Vspace)이 위치한다고 가정하고 page 컴포넌트에서 blocks 들을 가져와 사용하는 상황이라고 해보자.</p>\n<p><img alt=\"Directory\" src=\"https://raw.githubusercontent.com/Rory0304/rory-public-docs/main/rory-dev/articles/es6-export-import/directory.png\"></p>\n<p>첫번째로 default export / import 를 사용하여 구성하는 방법이다.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// Box.tsx</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Box</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =&gt;</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Box</span>;\n</code></pre><pre><code>// page.tsx\n\nimport Box from 'src/components/blocks/Box';\nimport Vsapce from 'src/components/blocks/Vsapce';\nimport Hspace from 'src/components/blocks/Hspace';\n</code></pre><p>이 방법의 예상되는 단점은 다음과 같다.</p>\n<ol>\n<li><p>모듈 사용부에서 중복 경로를 매번 작성해주어야 함</p>\n</li>\n<li><p>import 시 변수명을 자유롭게 설정할 수 있기 때문에 개발자에 따라 명명 방법이 달라질 수 있음</p>\n</li>\n</ol>\n<p>⇒ 리팩토링 비용 증가로 이어짐</p>\n<p>이를 보완해주려면, 모듈을 조합하는 방식을 사용하면 된다. 모듈 조합은 export 된 모듈들을 모아서 한 번에</p>\n<p>re-export 하는 방식이다. 즉, 아래처럼 Blocks 경로에 있는 Box, Vspace, Hspace 컴포넌트를 한 번에 불러올 수 있다.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Box</span>, <span class=\"hljs-title class_\">Vspace</span>, <span class=\"hljs-title class_\">Hspace</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'src/compoentns/blocks'</span>\n</code></pre><p>모듈 조합을 적절히 사용한다면, 위 코드 처럼 중복 코드를 제거하여 필요한 모듈만을 불러올 수 있을 것이고 미리 정의된 이름을 사용하여 리팩토링 비용을 낮출 수 있을 것이다. </p>\n<p>모듈 조합을 위해서는 index 파일을 사용한다. ES6에서 index 파일의 역할은 이 <a href=\"https://www.digitalocean.com/community/tutorials/react-index-js-public-interfaces\">링크</a>에서 자세히 알아볼 수 있다.</p>\n<blockquote>\n<p>In&nbsp;<code>ES6</code>, having an&nbsp;<code>index.js</code>&nbsp;file in a folder lets you perform an&nbsp;<code>import</code>&nbsp;from the folder implicitly without specifying the&nbsp;<code>index.js</code>&nbsp;in the import statement – just like how web servers will serve up the&nbsp;<code>index.html</code>&nbsp;in a folder without you needing to explicitly put the&nbsp;<code>index.html</code>&nbsp;in the URL.</p>\n</blockquote>\n<p>먼저 blocks 경로 하위에 index.ts 파일을 생성하고 export 된 모듈들을 다시 re-export 해준다.</p>\n<p>이때 re-export 해주는 방식은 크게 2가지 이다. </p>\n<ol>\n<li>defined export 를 사용했을 경우</li>\n</ol>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// Box.tsx</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Box</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =&gt;</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Box</span>;\n</code></pre><ul>\n<li>‘as’ 키워드를 활용하여, 정의된 이름으로 모듈을 import 해올 수 있도록 한다.</li>\n</ul>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// components/blocks/index.ts</span>\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Box</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./Box\"</span>;\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Hspace</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./Hspace\"</span>;\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Vspace</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./Vspace\"</span>;\n</code></pre><ol start=\"2\">\n<li>named export 를 사용했을 경우</li>\n</ol>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// Box.tsx</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Box</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =&gt;</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>...<span class=\"hljs-tag\">&lt;/&gt;</span></span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Flex</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = () =  \n\n<span class=\"hljs-comment\">// Hspace </span>\nexoort <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Hspace</span> : <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =&gt;</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span> ...<span class=\"hljs-tag\">&lt;/&gt;</span></span>\n</code></pre><p>‘*’ 를 사용하여 named export 를 모두 내보낼 수 있다. </p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// components/blocks/index.ts</span>\n\n<span class=\"hljs-keyword\">export</span> * <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./Box\"</span>; <span class=\"hljs-comment\">// Box 와 Flex 컴포넌트가 모두 내보내진다.</span>\n<span class=\"hljs-keyword\">export</span> * <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./Hspace\"</span>;\n<span class=\"hljs-keyword\">export</span> * <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./Vspace\"</span>;\n</code></pre><p>만약, 특정 모듈만을 pick하여 export 를 하고 싶다면 아래와 같이 작성해주면 된다. </p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">Box</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./Box\"</span>;\n<span class=\"hljs-keyword\">export</span> * <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./Hspace\"</span>;\n<span class=\"hljs-keyword\">export</span> * <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./Vspace\"</span>;\n</code></pre><h2 id=\"참고-자료\">참고 자료</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/export\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/export</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/react-index-js-public-interfaces\">https://www.digitalocean.com/community/tutorials/react-index-js-public-interfaces</a></li>\n<li><a href=\"https://ko.javascript.info/import-export\">https://ko.javascript.info/import-export</a></li>\n<li><a href=\"https://jamesknelson.com/re-exporting-es6-modules/\">https://jamesknelson.com/re-exporting-es6-modules/</a></li>\n</ul>\n","category":"JavaScript","date":"2023-05-16T00:00:00.000+09:00","thumbnail":{"__typename":"Asset","url":"https://images.ctfassets.net/98cksird3kze/QdOsNO0hSdGXMYOK2mGeV/bc879a3e35ff501dc631e4255753b358/Group_1.png"}}}],["$","$Le",null,{}]]
