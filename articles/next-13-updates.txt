0:[[["",{"children":["articles",{"children":[["slug","next-13-updates","d"],{"children":["__PAGE__?{\"slug\":\"next-13-updates\"}",{}]}]}]},"$undefined","$undefined",true],"$L1",[[],["$L2",null]]]]
3:HL["/_next/static/css/5c5a75f489881250.css",{"as":"style"}]
4:I{"id":"770","chunks":["171:static/chunks/171-b78b0fda5020ccdb.js","509:static/chunks/509-5ff123a447c14d07.js","185:static/chunks/app/layout-67254fdcc2a8ff2c.js"],"name":"","async":false}
5:I{"id":"3011","chunks":["171:static/chunks/171-b78b0fda5020ccdb.js","509:static/chunks/509-5ff123a447c14d07.js","185:static/chunks/app/layout-67254fdcc2a8ff2c.js"],"name":"","async":false}
6:I{"id":"105","chunks":["171:static/chunks/171-b78b0fda5020ccdb.js","793:static/chunks/793-38e2f97c5de9d148.js","553:static/chunks/553-3e31f0dd94cf78e4.js","83:static/chunks/app/articles/[slug]/page-b8ff9db85eb8092d.js"],"name":"","async":false}
7:I{"id":"6606","chunks":["171:static/chunks/171-b78b0fda5020ccdb.js","793:static/chunks/793-38e2f97c5de9d148.js","553:static/chunks/553-3e31f0dd94cf78e4.js","83:static/chunks/app/articles/[slug]/page-b8ff9db85eb8092d.js"],"name":"","async":false}
8:I{"id":"9544","chunks":["272:static/chunks/webpack-a477e8d29e1bdc30.js","667:static/chunks/2443530c-30b88932146dcfcd.js","139:static/chunks/139-357fbf7134fa8a25.js"],"name":"","async":false}
9:I{"id":"99","chunks":["272:static/chunks/webpack-a477e8d29e1bdc30.js","667:static/chunks/2443530c-30b88932146dcfcd.js","139:static/chunks/139-357fbf7134fa8a25.js"],"name":"","async":false}
b:I{"id":"1408","chunks":["171:static/chunks/171-b78b0fda5020ccdb.js","793:static/chunks/793-38e2f97c5de9d148.js","553:static/chunks/553-3e31f0dd94cf78e4.js","83:static/chunks/app/articles/[slug]/page-b8ff9db85eb8092d.js"],"name":"","async":false}
1:[["$","html",null,{"lang":"ko","children":[["$","head",null,{"children":[["$","link",null,{"rel":"stylesheet","as":"style","crossOrigin":"","href":"https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.6/dist/web/static/pretendard.css"}],["$","link",null,{"rel":"stylesheet","as":"style","crossOrigin":"","href":"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/github.min.css","title":"light"}],["$","link",null,{"rel":"stylesheet","as":"style","crossOrigin":"","href":"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/github-dark.min.css","title":"dark"}],["$","link",null,{"rel":"icon","href":"/favicon.ico"}]]}],["$","$L4",null,{"children":["$","$L5",null,{"children":["$","body",null,{"children":[["$","$L6",null,{}],["$","$L7",null,{"children":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","articles","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","articles","children",["slug","next-13-updates","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$La",null],"segment":"__PAGE__?{\"slug\":\"next-13-updates\"}"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5c5a75f489881250.css","precedence":"next"}]]}],"segment":["slug","next-13-updates","d"]},"styles":[]}],"segment":"articles"},"styles":[]}]}],["$","$Lb",null,{}]]}]}]}]]}],null]
2:[[["$","meta",null,{"charSet":"utf-8"}],null,null,null,null,null,null,null,null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,null]
c:I{"id":"809","chunks":["171:static/chunks/171-b78b0fda5020ccdb.js","793:static/chunks/793-38e2f97c5de9d148.js","553:static/chunks/553-3e31f0dd94cf78e4.js","83:static/chunks/app/articles/[slug]/page-b8ff9db85eb8092d.js"],"name":"","async":false}
d:I{"id":"8850","chunks":["171:static/chunks/171-b78b0fda5020ccdb.js","793:static/chunks/793-38e2f97c5de9d148.js","553:static/chunks/553-3e31f0dd94cf78e4.js","83:static/chunks/app/articles/[slug]/page-b8ff9db85eb8092d.js"],"name":"","async":false}
e:I{"id":"5771","chunks":["171:static/chunks/171-b78b0fda5020ccdb.js","793:static/chunks/793-38e2f97c5de9d148.js","553:static/chunks/553-3e31f0dd94cf78e4.js","83:static/chunks/app/articles/[slug]/page-b8ff9db85eb8092d.js"],"name":"","async":false}
a:[["$","$Lc",null,{"title":"Articles | rory dev","description":" Mainly handle development-related knowledge and project retrospectives."}],["$","$Ld",null,{"article":{"__typename":"Article","sys":{"__typename":"Sys","id":"63Jpmzv1pYg8ynNqhBU4Ia"},"title":"Next.js13 업데이트 사항 정리","slug":"next-13-updates","content":"<h2 id=\"시작에-앞서\">시작에 앞서,</h2>\n<p>오늘은 Next.js 13 업데이트 사항을 정리해보려 한다. 지난 회사에서 진행한 프로젝트는 대부분 12 버전이였고, 사용하면서 서버 사이드 로직 관리, 이미지 컴포넌트 코드 작성 방법 등의 불편함이 존재했는데, 13 버전에서 일부분 해결이 된 것으로 보인다.</p>\n<p><a href=\"https://nextjs.org/blog/next-13\">Next.js 13 공식 문서</a></p>\n<p>공식 블로그에 공지된 업데이트 사항은 다음과 같다. </p>\n<p><img alt=\"Next.js docs image\" src=\"https://github.com/Rory0304/rory-public-docs/blob/main/rory-dev/articles/next-13-updates/nextjs-docs.png?raw=true\"></p>\n<p>이번 포스팅에서 주로 다룰 부분은 1) app directory 구조 변화와 2) image, link 사용 방법이다.</p>\n<h2 id=\"1-app-directory\">1. app Directory</h2>\n<p>지난 12 버전에서 다룬 파일 시스템 구조는 <code>/pages</code> 기반이였다. /pages 디렉토리 하위에서 _app, _document와 각종 페이지 라우트를 관리해주었는데 13버전에서는 이를 <code>/app</code>에서 관리한다. </p>\n<p><strong>1)  Layouts</strong></p>\n<p>12 버전에서는 /pages 경로에 파일이 위치하게 되면 이를 페이지 라우팅 용도로 인식해서, <a href=\"https://nextjs.org/docs/pages/api-reference/next-config-js/pageExtensions#including-non-page-files-in-the-pages-directory\">next.config 에 따로 설정</a>하지 않는 한, 페이지 용도가 아닌 파일들을 위치시킬 수 없었다. </p>\n<p>그러나, 이번 13 버전에서는 페이지 용도가 아닌 파일들도 /app 하위 디렉토리에 위치시킬 수 있고 , 이에 따른 파일 컨벤션이 존재한다. </p>\n<p><strong>page.js</strong></p>\n<p>특정 경로의 메인 페이지 컴포넌트로, 12버전의 index.js 파일 대신 page.js 를 사용한다.</p>\n<p>아래 사진처럼 <code>/app/dashboard/settings</code> 경로 하위에 page.js 를 위치시키면 자동으로 <code>/dashboard/settings</code> 라는 페이지 경로가 생성된다. </p>\n<p><img alt=\"Next.js layout\" src=\"https://github.com/Rory0304/rory-public-docs/blob/main/rory-dev/articles/next-13-updates/nextjs-layout.png?raw=true\"></p>\n<ul>\n<li>layout.js</li>\n</ul>\n<p>페이지 레이아웃 컴포넌트를 설정할 수 있다. /app의 root 경로에 바로 layout.js 를 추가하면 global(root) 레이아웃을 설정할 수 있고, 페이지 디렉토리 하위에 위치하면 per-page(nested) 레이아웃을 만들어줄 수 있다.</p>\n<p><img alt=\"root layout 과 nested layout 설정 방법\" src=\"https://github.com/Rory0304/rory-public-docs/blob/main/rory-dev/articles/next-13-updates/nextjs-layout-types.png?raw=true\"></p>\n<p>root layout 과 nested layout 설정 방법</p>\n<p>코드 상으로는 아래와 같이 layout 파일을 만들어주고, layout 이 감싸게 될 자식 컴포넌트로 children 을 보내주면 된다.</p>\n<ul>\n<li>root layout</li>\n</ul>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">RootLayout</span>(<span class=\"hljs-params\">{\n  children,\n}: {\n  children: React.ReactNode;\n}</span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>{children}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span>\n  );\n}\n</code></pre><ul>\n<li>nested layout</li>\n</ul>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">DashboardLayout</span>(<span class=\"hljs-params\">{\n  children,\n}: {\n  children: React.ReactNode;\n}</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span>&gt;</span>{children}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span>;\n}\n</code></pre><p>12버전의 _app, _directory 그리고 per-page layout 을 위해 사용했던 getLayout 역할을 대신한다고 보면 된다. </p>\n<ul>\n<li><a href=\"https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts#per-page-layouts\">12버전에서 사용하던 layout 설정 방식 보러가기</a></li>\n</ul>\n<p><strong>loading.js</strong></p>\n<p>로딩 UI 를 보여줄 수 있고, 페이지 디렉토리 내 모든 파일들이 loading 동안에는 자동으로 React.Suspense 로  감싸진다. </p>\n<p><img alt=\"Next.js loading UI\" src=\"https://github.com/Rory0304/rory-public-docs/blob/main/rory-dev/articles/next-13-updates/nextjs-loading.png?raw=true\"></p>\n<p><strong>error.js</strong></p>\n<p>런타인 동안의 에러를 다룰 수 있는 컴포넌트이고, 페이지 디렉토리 내 파일들이 자동으로 React error boudary </p>\n<p>범위로 감싸진다. </p>\n<p><img alt=\"Next.js error UI\" src=\"https://github.com/Rory0304/rory-public-docs/blob/main/rory-dev/articles/next-13-updates/nextjs-error.png?raw=true\"></p>\n<p>더 자세한 내용은 아래 파일 컨벤션 문서에서 확인할 수 있다. </p>\n<ul>\n<li><a href=\"https://nextjs.org/docs/app/building-your-application/routing#file-conventions\">https://nextjs.org/docs/app/building-your-application/routing#file-conventions</a></li>\n</ul>\n<p><strong>2) React Server Components</strong></p>\n<p>13 버전에서는 react client 컴포넌트와 server 컴포넌트를 app 하위에서 분리하여 관리할 수 있도록 지원한다. </p>\n<p>이전에는 하나의 컴포넌트 내부에서 getStaticProps와 getServerSideProps 를 이용하여 서버 사이드 로직과 클라이언트 사이드 로직을 한 번에 관리를 했으나, 13 버전에서는 로직을 ‘use client’ , ‘server-only’ 키워드를 사용하여 파일로 관리할 수 있도록 한다.</p>\n<p><strong>기본적으로 app 경로 하위의 파일들은 server component 로 동작하고 클라이언트 사이드 컴포넌트를 정의하고 싶다면 ‘client only’ 를 최상단에 작성하면 된다.</strong></p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-string\">'use client'</span>; <span class=\"hljs-comment\">// 최상단에 작성해준다.</span>\n\n<span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [count, setCount] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>You clicked {count} times<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setCount(count + 1)}&gt;Click me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</code></pre><p>그렇다면, 언제 서버 사이드나 클라이언트 사이드를 사용하면 좋을까? 아래 문서에서 자세히 설명해주고 있지만, 요약하자면 다음과 같다. </p>\n<ul>\n<li><strong><strong><a href=\"https://nextjs.org/docs/getting-started/react-essentials#when-to-use-server-and-client-components\">When to use Server and Client Components?</a></strong></strong><ul>\n<li>서버 사이드<ul>\n<li>백엔드 데이터를 패치하는 경우</li>\n<li>사이즈가 큰 dependency 를 사용하는 경우</li>\n</ul>\n</li>\n<li>클라이언트 사이드<ul>\n<li>onClick(), onChange() 와 같은 이벤트 리스너를 사용하는 경우</li>\n<li>state 관리를 하거나 react life cycle 을 사용하는 경우</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>여기서 중요한 점은 Client Component 에서 서버에서 동작하는 로직이 포함된 Server Component 를 임포트할 수는 없다. 서버 컴포넌트를 브라우저 단에서 실행할 수는 없기 때문이다.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-string\">'use client'</span>;\n\n<span class=\"hljs-comment\">// This pattern will **not** work!</span>\n<span class=\"hljs-comment\">// You cannot import a Server Component into a Client Component.</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ExampleServerComponent</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./example-server-component'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ExampleClientComponent</span>(<span class=\"hljs-params\">{\n  children,\n}: {\n  children: React.ReactNode;\n}</span>) {\n  <span class=\"hljs-keyword\">const</span> [count, setCount] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setCount(count + 1)}&gt;{count}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ExampleServerComponent</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n  );\n}\n</code></pre><p>다만, 클라이언트 컴포넌트에서 서버 컴포넌트를 children props 으로 받을 수는 있다.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// This pattern works:</span>\n<span class=\"hljs-comment\">// You can pass a Server Component as a child or prop of a</span>\n<span class=\"hljs-comment\">// Client Component.</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ExampleClientComponent</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./example-client-component'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ExampleServerComponent</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./example-server-component'</span>;\n\n<span class=\"hljs-comment\">// Pages in Next.js are Server Components by default</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Page</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ExampleClientComponent</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ExampleServerComponent</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ExampleClientComponent</span>&gt;</span></span>\n  );\n}\n</code></pre><p>이는 <a href=\"https://nextjs.org/docs/getting-started/react-essentials#composing-client-and-server-components\">컴포넌트 합성</a>과 관련이 있는데, 위 코드를 참고하여 이해해보자면, 서버 사이드로 동작하는 Page.tsx 에서 클라이언트 사이드의 컴포넌트 <code>ExampleClientComponent</code>를 임포트해오고  <code>ExampleClientComponent</code>는 서버 사이드의 컴포넌트인 <code>ExampleServerComponent</code>를 children 으로 받는다.</p>\n<blockquote>\n<p>React will know it needs to render on the server before sending the result (which doesn't contain any server-only code) to the client. From the Client Component's perspective, its child will be already rendered.</p>\n</blockquote>\n<p>즉, 클라이언트 컴포넌트는 ReactNode 를 prop 으로 받을 수 있고, ReactNode 는 서버 컴포넌트에 의해 렌더링할 수 있기 때문에 서버 컴포넌트를 children prop 으로 전달하는 것은 가능하다. 클라이언트 컴포넌트의 관점에서는 child 인 서버 컴포넌트가 이미 렌더링되었기 때문이다.</p>\n<p><strong>3) Data Fetching</strong></p>\n<p>13 버전에서는 <code>getStaticProps</code> / <code>getInitialProps</code> / <code>getServersideProps</code> 의 방법은 지원되지 않고 fetch option 으로 대체되었다. </p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// This request should be cached until manually invalidated.</span>\n<span class=\"hljs-comment\">// Similar to `getStaticProps`.</span>\n<span class=\"hljs-comment\">// `force-cache` is the default and can be omitted.</span>\n<span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-variable constant_\">URL</span>, { <span class=\"hljs-attr\">cache</span>: <span class=\"hljs-string\">'force-cache'</span> });\n\n<span class=\"hljs-comment\">// This request should be refetched on every request.</span>\n<span class=\"hljs-comment\">// Similar to `getServerSideProps`.</span>\n<span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-variable constant_\">URL</span>, { <span class=\"hljs-attr\">cache</span>: <span class=\"hljs-string\">'no-store'</span> });\n\n<span class=\"hljs-comment\">// This request should be cached with a lifetime of 10 seconds.</span>\n<span class=\"hljs-comment\">// Similar to `getStaticProps` with the `revalidate` option.</span>\n<span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-variable constant_\">URL</span>, { <span class=\"hljs-attr\">next</span>: { <span class=\"hljs-attr\">revalidate</span>: <span class=\"hljs-number\">10</span> } });\n</code></pre><ul>\n<li><code>{ cache: 'force-cache' }</code>&nbsp;- getStaticProps 처럼 동작하며, 기본값이다. (<a href=\"https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props\">getStaticprops 설명</a>)</li>\n<li><code>{ cache: 'no-store' }</code>&nbsp;- getServersideProps와 유사하고,  매 요청마다 최신 데이터를 refetch 해온다. (<a href=\"https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props\">getServersideProps 설명</a>)</li>\n<li><code>{ next: { revalidate: 10 } }</code>&nbsp;- revalidate 옵션이 있는 getStaticProps 와 유사함, 매 10초 마다 요청이 들어오면 최신 데이터를 fetch 함</li>\n</ul>\n<h2 id=\"2-new-nextimage\">2. New next/image</h2>\n<p>13버전에서 개선된 nextjs image 컴포넌트의 특징은 아래와 같다. </p>\n<ul>\n<li>Ships less client-side JavaScript</li>\n<li>Easier to style and configure</li>\n<li>More accessible requiring&nbsp;<code>alt</code>&nbsp;tags by default</li>\n<li>Aligns with the Web platform</li>\n<li>Faster because native lazy loading doesn't require hydration</li>\n</ul>\n<p>Layout Shift 와 최적화를 위한 개선을 시도 하였으며, 코드 상으로는 일부 스타일링과 접근성을 위한 속성이 정리되었다. 접근성을 위해 alt 속성이 필수값이 되었고, 12버전에서 사용되던 layout 속성이 제거되어 13 버전에서는 ‘fill (boolean)’ 으로 대체되었다. </p>\n<p>추가된 필수 속성</p>\n<ul>\n<li>width</li>\n<li>height</li>\n<li>alt</li>\n<li>fill (boolean)</li>\n</ul>\n<p>제거된 속성 </p>\n<ul>\n<li>objectFit</li>\n<li>objectPosition</li>\n<li>layout</li>\n</ul>\n<p>그 외, 12 버전의 이미지 컴포넌트는 next/legacy/image 로 위치가 변경되었다.</p>\n<p>자세한 변경사항은 이 <a href=\"https://nextjs.org/docs/pages/building-your-application/optimizing/images#image-sizing\">링크</a>를 참고하면 된다. </p>\n<h2 id=\"3-new-nextlink\">3. New next/link</h2>\n<p>기존 12버전의 next/link 는 자동으로 <a> 로 wrap 되지 않았기 때문에 접근성을 위해서는 모두 </a><a> 태그를 nested 하여 작성해주어야 했다.</a></p><a>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Link</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/link'</span>\n\n<span class=\"hljs-comment\">// Next.js 12: `&lt;a&gt;` has to be nested otherwise it's excluded</span>\n&lt;<span class=\"hljs-title class_\">Link</span> href=<span class=\"hljs-string\">\"/about\"</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span>&gt;</span>About<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Link</span>&gt;\n\n<span class=\"hljs-comment\">// Next.js 13: `&lt;Link&gt;` always renders `&lt;a&gt;`</span>\n<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/about\"</span>&gt;</span>\n  About\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span></span>\n</code></pre><p>13 버전에서는 강제로 a 태그가 wrap 이 되기 때문에, 바로 만 사용해주어도 된다.</p>\n<p>만약 12 버전처럼 사용하고 싶다면 <code>legacyBehavior</code> 속성을 사용하면 된다.</p>\n</a><p><a>자세한 변경사항은 이 </a><a href=\"https://nextjs.org/docs/app/api-reference/components/link\">링크</a>를 참고하면 된다. </p>\n<h2 id=\"참고-자료\">참고 자료</h2>\n<ul>\n<li><a href=\"https://programming119.tistory.com/267\">https://programming119.tistory.com/267</a></li>\n<li><a href=\"https://patterns-dev-kr.github.io/rendering-patterns/react-server-components/\">https://patterns-dev-kr.github.io/rendering-patterns/react-server-components/</a></li>\n<li><a href=\"https://velog.io/@xmun74/Data-Fetching-getStaticProps-getStaticPaths-getServerSideProps\">https://velog.io/@xmun74/Data-Fetching-getStaticProps-getStaticPaths-getServerSideProps</a></li>\n</ul>\n","category":"Next.js","date":"2023-05-23T00:00:00.000+09:00","thumbnail":{"__typename":"Asset","url":"https://images.ctfassets.net/98cksird3kze/35K7W192oAzeSlh63E6XKX/9e4095a2585c8a2fd8312ccf6ce8c4d5/Group_1__2_.png"}}}],["$","$Le",null,{}]]
